#!/bin/bash

##	This script will chuck the finished zst packages into the side repo and then clean up the site and upload the PKGBUILD version.

## Functions
source ctos-functions

## Recycle
lineBreak="<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>"
myLocalRepo="pkgBld/ctos-side-repo"
myArch="x86_64/"
thRepo="$HOME/$myLocalRepo/$myArch"

clear
cd "$PWD"
currentDir=${PWD##*/}

##  Global
declare -a thFiles

## Functions
function find_old_pkgs() {
    ##  Fill array
    local thLocation=$1
    local thPrefix=$2
    local thExtention=$3
    echo "The Path: " $thLocation
    echo "The Prefix: " $thPrefix
    echo "The Extention: " $thExtention
    newFileLocation=$(ls -t $thLocation$thPrefix*.$thExtention | head -1)
    echo $lineBreak
    newFile=${newFileLocation##*/}
    echo "Here is the newest file: " $newFile
    for f in $thLocation$thPrefix*.$thExtention; do
        fileName=${f##*/}
        if [ "$fileName" != "$newFile" ]; then
            thFiles+=($fileName)
        fi
    done
    echo $lineBreak
    echo "Here are all the $thExtention files apart from the newest one."
    echo "Total files in function: ${#thFiles[@]}"
    count=0
    for i in "${thFiles[@]}"; do
        echo "File $((count + 1)): "$i
        ((count++))
    done
    echo $lineBreak
}

echo "Building package and pushing"
echo "it to the side repo for compiling and uploading."
if !( makepkg -csrf --sign ); then
    echo "This is not a PKGBUILD"
    not_my_dir
    something_wrong
else
    echo "The next bit happens here"
    echo "after the package has been signed for."
    echo $lineBreak
    to_continue
    clear
    echo $lineBreak
    echo "Looking for local repo."
    if !( test_location "$thRepo" ); then
        echo "can't find the repo location at: $thRepo"
        something_wrong
    else
        echo "Found the repo location."
        echo $lineBreak
        to_continue
        clear
        echo $lineBreak
        echo "Copying the ZST and SIG files to the repo."
        if !( cp -vir *.zst* $thRepo ); then
            something_wrong
        else
            echo "Files copied"
            echo $lineBreak
            echo "What are we missing?"
            echo $lineBreak
            echo "Time to start deleting the old files and cleaning up the build folder."
            echo $lineBreak
            to_continue
            clear
            echo $lineBreak
            echo "Check for duplicates in the x86_64 folder and remove the oldest ones leaving the newest zst and the sig files."
            to_continue
            if !( find_old_pkgs $thRepo $currentDir "zst" ); then
                something_wrong
            else
                get_list $thRepo $currentDir "zst"
                echo "Source functions worked."
                echo "See above for results."
                echo "See what has been passed?"
                to_continue
                echo "Here is the array that was passed:"
                echo "${thFiles[@]}"
                echo $lineBreak
                echo "Pass back true?"
                echo $lineBreak
                echo "Total files in function: ${#thFiles[@]}"
                for i in "${thFiles[@]}"; do
                    echo "File $((count + 1)): "$i
                    ((count++))
                done
                echo "These are the .zst files in the repo."
                echo "Check that there is no issue"
                echo "with the new files being displayed."
                echo "This is the last try!!"
                echo "Did it work or is it blank?"
                to_continue
                echo $lineBreak
                clear
                echo $lineBreak
                echo "Do you want to read the sig files?"
                echo $lineBreak
                to_continue
                echo $lineBreak
                if !( find_old_pkgs $thRepo $currentDir "sig" ); then
                    something_wrong
                else
                    echo "These are the .sig files in the repo."
                    echo $lineBreak
                    echo "Make sure it displays the newest file"
                    echo "and the oldest files."
                fi
                #fi
            fi
        fi
        exit 0
    fi
fi
